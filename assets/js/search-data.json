{
  
    
        "post0": {
            "title": "Title",
            "content": "import pandas as pd # import numpy as np # import matplotlib.pyplot as plt !pip install statsmodels . Requirement already satisfied: statsmodels in /usr/local/lib/python3.6/dist-packages (0.10.2) Requirement already satisfied: scipy&gt;=0.18 in /usr/local/lib/python3.6/dist-packages (from statsmodels) (1.4.1) Requirement already satisfied: pandas&gt;=0.19 in /usr/local/lib/python3.6/dist-packages (from statsmodels) (1.0.5) Requirement already satisfied: patsy&gt;=0.4.0 in /usr/local/lib/python3.6/dist-packages (from statsmodels) (0.5.1) Requirement already satisfied: numpy&gt;=1.11 in /usr/local/lib/python3.6/dist-packages (from statsmodels) (1.18.5) Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas&gt;=0.19-&gt;statsmodels) (2018.9) Requirement already satisfied: python-dateutil&gt;=2.6.1 in /usr/local/lib/python3.6/dist-packages (from pandas&gt;=0.19-&gt;statsmodels) (2.8.1) Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from patsy&gt;=0.4.0-&gt;statsmodels) (1.15.0) . Loading Portland Housing Price Prediction Dataset . ptlnd = pd.read_csv(&#39;ex1data2.txt&#39;,header=None) # ptval = ptlnd.iloc[:,2].values # ptindex = ptlnd.iloc[:,0].values . . installing statsmodels and its dependencies . import statsmodels.api as sm from patsy import dmatrices # patsy is a Python library for describing statistical models and building Design Matrices . /usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead. import pandas.util.testing as tm . ptlnd.columns . Index([&#39;Living_area&#39;, &#39;bedrooms&#39;, &#39;Price&#39;], dtype=&#39;object&#39;) . ptlnd.rename(columns={0:&#39;Living_area&#39;,1:&#39;bedrooms&#39;,2:&#39;Price&#39;},inplace=True) . ptlnd.columns . Index([&#39;Living_area&#39;, &#39;bedrooms&#39;, &#39;Price&#39;], dtype=&#39;object&#39;) . create two design matrices to fit estimated model (OLS) . $y$ : matrix of endogenous variables (dependent), $N times 1$ column data ~ Price | $X$ : matrix exogenous varaibles (independent), $N times 3$ column data ~ y-Intercept, Living Area, #bedrooms | . y, X = dmatrices(&#39;Price ~ Living_area + bedrooms&#39;,data=ptlnd,return_type=&#39;dataframe&#39;) . Design Matrices . y.head() . Price . 0 399900.0 | . 1 329900.0 | . 2 369000.0 | . 3 232000.0 | . 4 539900.0 | . X.head() . Intercept Living_area bedrooms . 0 1.0 | 2104.0 | 3.0 | . 1 1.0 | 1600.0 | 3.0 | . 2 1.0 | 2400.0 | 3.0 | . 3 1.0 | 1416.0 | 2.0 | . 4 1.0 | 3000.0 | 4.0 | . Model fit and summary . Describe, fit and summarize model using Ordinary Least Squares (OLS) | . mod = sm.OLS(y,X) # fit model res = mod.fit() # Summarize model print(res.summary()) . OLS Regression Results ============================================================================== Dep. Variable: Price R-squared: 0.733 Model: OLS Adj. R-squared: 0.721 Method: Least Squares F-statistic: 60.38 Date: Tue, 29 Sep 2020 Prob (F-statistic): 2.43e-13 Time: 14:40:19 Log-Likelihood: -586.77 No. Observations: 47 AIC: 1180. Df Residuals: 44 BIC: 1185. Df Model: 2 Covariance Type: nonrobust =============================================================================== coef std err t P&gt;|t| [0.025 0.975] - Intercept 8.96e+04 4.18e+04 2.145 0.037 5421.208 1.74e+05 Living_area 139.2107 14.795 9.409 0.000 109.393 169.028 bedrooms -8738.0191 1.55e+04 -0.566 0.575 -3.99e+04 2.24e+04 ============================================================================== Omnibus: 4.083 Durbin-Watson: 1.826 Prob(Omnibus): 0.130 Jarque-Bera (JB): 2.977 Skew: 0.567 Prob(JB): 0.226 Kurtosis: 3.484 Cond. No. 9.71e+03 ============================================================================== Warnings: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. [2] The condition number is large, 9.71e+03. This might indicate that there are strong multicollinearity or other numerical problems. . Extracting parameter estimates and $r^2$ . res.params . Intercept 89597.909543 Living_area 139.210674 bedrooms -8738.019112 dtype: float64 . res.rsquared . 0.7329450180289142 . Applying Rainbow Test for Linearity . The basic idea of the Rainbow test is that even if the true relationship is non-linear, a good linear fit can be achieved on a subsample in the &quot;middle&quot; of the data | . sm.stats.linear_rainbow(res) . (0.49348806706947385, 0.9499682609135575) . Draw a plot of partial regression for a set of regressors . sm.graphics.plot_partregress(&#39;Price&#39;,&#39;Living_area&#39;,[&#39;bedrooms&#39;],data=ptlnd,obs_labels=False) .",
            "url": "https://d3la.github.io/wOL3/2020/12/03/cs229Part1.html",
            "relUrl": "/2020/12/03/cs229Part1.html",
            "date": " • Dec 3, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "! pip install qeds . Collecting qeds Downloading https://files.pythonhosted.org/packages/41/50/509c79a019156862898acb9e23b28e872818c20492da187090167f6702ad/qeds-0.6.2.tar.gz Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (from qeds) (1.0.5) Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from qeds) (2.23.0) Collecting quandl Downloading https://files.pythonhosted.org/packages/1b/29/185269dbd2e2698c8098b35c52ce73a2c52cf76163e709f9f7789d03ebbb/Quandl-3.5.2-py2.py3-none-any.whl Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from qeds) (1.4.1) Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from qeds) (1.18.5) Collecting quantecon Downloading https://files.pythonhosted.org/packages/5d/e3/4fd5f948de917036b5696347b28fa25da7bd7df995e4f9f42db1c3070eb8/quantecon-0.4.8-py3-none-any.whl (230kB) |████████████████████████████████| 235kB 6.0MB/s Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (from qeds) (3.2.2) Requirement already satisfied: pyarrow in /usr/local/lib/python3.6/dist-packages (from qeds) (0.14.1) Requirement already satisfied: openpyxl in /usr/local/lib/python3.6/dist-packages (from qeds) (2.5.9) Requirement already satisfied: plotly in /usr/local/lib/python3.6/dist-packages (from qeds) (4.4.1) Requirement already satisfied: pandas_datareader in /usr/local/lib/python3.6/dist-packages (from qeds) (0.8.1) Requirement already satisfied: scikit-learn in /usr/local/lib/python3.6/dist-packages (from qeds) (0.22.2.post1) Requirement already satisfied: seaborn in /usr/local/lib/python3.6/dist-packages (from qeds) (0.10.1) Requirement already satisfied: statsmodels in /usr/local/lib/python3.6/dist-packages (from qeds) (0.10.2) Requirement already satisfied: python-dateutil&gt;=2.6.1 in /usr/local/lib/python3.6/dist-packages (from pandas-&gt;qeds) (2.8.1) Requirement already satisfied: pytz&gt;=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas-&gt;qeds) (2018.9) Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests-&gt;qeds) (1.24.3) Requirement already satisfied: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.6/dist-packages (from requests-&gt;qeds) (2.10) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests-&gt;qeds) (2020.6.20) Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests-&gt;qeds) (3.0.4) Requirement already satisfied: more-itertools in /usr/local/lib/python3.6/dist-packages (from quandl-&gt;qeds) (8.5.0) Collecting inflection&gt;=0.3.1 Downloading https://files.pythonhosted.org/packages/59/91/aa6bde563e0085a02a435aa99b49ef75b0a4b062635e606dab23ce18d720/inflection-0.5.1-py2.py3-none-any.whl Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from quandl-&gt;qeds) (1.15.0) Requirement already satisfied: sympy in /usr/local/lib/python3.6/dist-packages (from quantecon-&gt;qeds) (1.1.1) Requirement already satisfied: numba&gt;=0.38 in /usr/local/lib/python3.6/dist-packages (from quantecon-&gt;qeds) (0.48.0) Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,&gt;=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;qeds) (2.4.7) Requirement already satisfied: kiwisolver&gt;=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;qeds) (1.2.0) Requirement already satisfied: cycler&gt;=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib-&gt;qeds) (0.10.0) Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.6/dist-packages (from openpyxl-&gt;qeds) (1.0.1) Requirement already satisfied: jdcal in /usr/local/lib/python3.6/dist-packages (from openpyxl-&gt;qeds) (1.4.1) Requirement already satisfied: retrying&gt;=1.3.3 in /usr/local/lib/python3.6/dist-packages (from plotly-&gt;qeds) (1.3.3) Requirement already satisfied: lxml in /usr/local/lib/python3.6/dist-packages (from pandas_datareader-&gt;qeds) (4.2.6) Requirement already satisfied: joblib&gt;=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn-&gt;qeds) (0.16.0) Requirement already satisfied: patsy&gt;=0.4.0 in /usr/local/lib/python3.6/dist-packages (from statsmodels-&gt;qeds) (0.5.1) Requirement already satisfied: mpmath&gt;=0.19 in /usr/local/lib/python3.6/dist-packages (from sympy-&gt;quantecon-&gt;qeds) (1.1.0) Requirement already satisfied: llvmlite&lt;0.32.0,&gt;=0.31.0dev0 in /usr/local/lib/python3.6/dist-packages (from numba&gt;=0.38-&gt;quantecon-&gt;qeds) (0.31.0) Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from numba&gt;=0.38-&gt;quantecon-&gt;qeds) (50.3.0) Building wheels for collected packages: qeds Building wheel for qeds (setup.py) ... done Created wheel for qeds: filename=qeds-0.6.2-cp36-none-any.whl size=27821 sha256=7e13f5972afd7d6676eb9587e4cf0b29bcfdaf9b215dc4e26962f5e8ae8709df Stored in directory: /root/.cache/pip/wheels/b7/0b/74/c09109813c2b6116a2d4f2833c354b24163672f846a50fc7b4 Successfully built qeds Installing collected packages: inflection, quandl, quantecon, qeds Successfully installed inflection-0.5.1 qeds-0.6.2 quandl-3.5.2 quantecon-0.4.8 . import pandas as pd %matplotlib inline # activating plot theme import qeds qeds.themes.mpl_style . &lt;function qeds.themes.mpl_style&gt; . pd.__version__ . &#39;1.0.5&#39; . values = [5.6,5.3,4.3,4.2,5.8,5.3,4.6,7.8,9.1,8.,5.7] years = list(range(1995,2017,2)) unemp = pd.Series(data=values,index=years,name=&#39;Unemployment&#39;) unemp . 1995 5.6 1997 5.3 1999 4.3 2001 4.2 2003 5.8 2005 5.3 2007 4.6 2009 7.8 2011 9.1 2013 8.0 2015 5.7 Name: Unemployment, dtype: float64 . unemp.index . Int64Index([1995, 1997, 1999, 2001, 2003, 2005, 2007, 2009, 2011, 2013, 2015], dtype=&#39;int64&#39;) . unemp.values . array([5.6, 5.3, 4.3, 4.2, 5.8, 5.3, 4.6, 7.8, 9.1, 8. , 5.7]) . unemp.name . &#39;Unemployment&#39; . unemp.plot() #python matplotlib plot command . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fadfba42550&gt; . unemp.unique() . array([5.6, 5.3, 4.3, 4.2, 5.8, 4.6, 7.8, 9.1, 8. , 5.7]) . unemp.plot.bar() . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fd33a57db00&gt; . data = { &quot;NorthEast&quot;: [5.9, 5.6, 4.4, 3.8, 5.8, 4.9, 4.3, 7.1, 8.3, 7.9, 5.7], &quot;MidWest&quot;: [4.5, 4.3, 3.6, 4. , 5.7, 5.7, 4.9, 8.1, 8.7, 7.4, 5.1], &quot;South&quot;: [5.3, 5.2, 4.2, 4. , 5.7, 5.2, 4.3, 7.6, 9.1, 7.4, 5.5], &quot;West&quot;: [6.6, 6., 5.2, 4.6, 6.5, 5.5, 4.5, 8.6, 10.7, 8.5, 6.1], &quot;National&quot;: [5.6, 5.3, 4.3, 4.2, 5.8, 5.3, 4.6, 7.8, 9.1, 8., 5.7] } unemp_region = pd.DataFrame(data,index=years) unemp_region . NorthEast MidWest South West National . 1995 5.9 | 4.5 | 5.3 | 6.6 | 5.6 | . 1997 5.6 | 4.3 | 5.2 | 6.0 | 5.3 | . 1999 4.4 | 3.6 | 4.2 | 5.2 | 4.3 | . 2001 3.8 | 4.0 | 4.0 | 4.6 | 4.2 | . 2003 5.8 | 5.7 | 5.7 | 6.5 | 5.8 | . 2005 4.9 | 5.7 | 5.2 | 5.5 | 5.3 | . 2007 4.3 | 4.9 | 4.3 | 4.5 | 4.6 | . 2009 7.1 | 8.1 | 7.6 | 8.6 | 7.8 | . 2011 8.3 | 8.7 | 9.1 | 10.7 | 9.1 | . 2013 7.9 | 7.4 | 7.4 | 8.5 | 8.0 | . 2015 5.7 | 5.1 | 5.5 | 6.1 | 5.7 | . unemp_region[&#39;West&#39;]/100 . 1995 0.066 1997 0.060 1999 0.052 2001 0.046 2003 0.065 2005 0.055 2007 0.045 2009 0.086 2011 0.107 2013 0.085 2015 0.061 Name: West, dtype: float64 . unemp_region.corr() . NorthEast MidWest South West National . NorthEast 1.000000 | 0.875654 | 0.964415 | 0.967875 | 0.976016 | . MidWest 0.875654 | 1.000000 | 0.951379 | 0.900638 | 0.952389 | . South 0.964415 | 0.951379 | 1.000000 | 0.987259 | 0.995030 | . West 0.967875 | 0.900638 | 0.987259 | 1.000000 | 0.981308 | . National 0.976016 | 0.952389 | 0.995030 | 0.981308 | 1.000000 | . unemp_region.dtypes . NorthEast float64 MidWest float64 South float64 West float64 National float64 dtype: object . str_unemp = unemp_region.copy() str_unemp[&#39;South&#39;] = str_unemp[&#39;South&#39;].astype(str) str_unemp.dtypes . NorthEast float64 MidWest float64 South object West float64 National float64 dtype: object . str_unemp.head() . NorthEast MidWest South West National . 1995 5.9 | 4.5 | 5.3 | 6.6 | 5.6 | . 1997 5.6 | 4.3 | 5.2 | 6.0 | 5.3 | . 1999 4.4 | 3.6 | 4.2 | 5.2 | 4.3 | . 2001 3.8 | 4.0 | 4.0 | 4.6 | 4.2 | . 2003 5.8 | 5.7 | 5.7 | 6.5 | 5.8 | . str_unemp.sum() . NorthEast 63.7 MidWest 62 South 5.35.24.24.05.75.24.37.69.17.45.5 West 72.8 National 65.7 dtype: object . unemp_region[&quot;UnweightedMean&quot;] = (unemp_region[&quot;NorthEast&quot;] + unemp_region[&quot;MidWest&quot;] + unemp_region[&quot;South&quot;] + unemp_region[&quot;West&quot;])/4 . unemp_region.tail() . NorthEast MidWest South West National UnweightedMean . 2007 4.3 | 4.9 | 4.3 | 4.5 | 4.6 | 4.50 | . 2009 7.1 | 8.1 | 7.6 | 8.6 | 7.8 | 7.85 | . 2011 8.3 | 8.7 | 9.1 | 10.7 | 9.1 | 9.20 | . 2013 7.9 | 7.4 | 7.4 | 8.5 | 8.0 | 7.80 | . 2015 5.7 | 5.1 | 5.5 | 6.1 | 5.7 | 5.60 | . names = {&#39;NorthEast&#39;:&#39;NE&#39;,&#39;MidWest&#39;:&#39;MW&#39;,&#39;South&#39;:&#39;S&#39;,&#39;West&#39;:&#39;W&#39;} unemp_region.rename(columns=names,inplace=True) unemp_region.head() . NE MW S W National UnweightedMean . 1995 5.9 | 4.5 | 5.3 | 6.6 | 5.6 | 5.575 | . 1997 5.6 | 4.3 | 5.2 | 6.0 | 5.3 | 5.275 | . 1999 4.4 | 3.6 | 4.2 | 5.2 | 4.3 | 4.350 | . 2001 3.8 | 4.0 | 4.0 | 4.6 | 4.2 | 4.100 | . 2003 5.8 | 5.7 | 5.7 | 6.5 | 5.8 | 5.925 | . # loading up data url = &quot;https://datascience.quantecon.org/assets/data/state_unemployment.csv&quot; unemp_raw = pd.read_csv(url,parse_dates=[&#39;Date&#39;]) # load up the Date column as a Python datetime type unemp_raw.head() . Date state LaborForce UnemploymentRate . 0 2000-01-01 | Alabama | 2142945.0 | 4.7 | . 1 2000-01-01 | Alaska | 319059.0 | 6.3 | . 2 2000-01-01 | Arizona | 2499980.0 | 4.1 | . 3 2000-01-01 | Arkansas | 1264619.0 | 4.4 | . 4 2000-01-01 | California | 16680246.0 | 5.0 | . unemp_raw.shape . (10800, 4) . # data transformation unemp_all = (unemp_raw .reset_index() .pivot_table(index=&#39;Date&#39;,columns=&#39;state&#39;,values=&#39;UnemploymentRate&#39;) ) unemp_all.head() . state Alabama Alaska Arizona Arkansas California Colorado Connecticut Delaware Florida Georgia Hawaii Idaho Illinois Indiana Iowa Kansas Kentucky Louisiana Maine Maryland Massachusetts Michigan Minnesota Mississippi Missouri Montana Nebraska Nevada New Hampshire New Mexico New York New jersey North Carolina North Dakota Ohio Oklahoma Oregon Pennsylvania Rhode island South Carolina South Dakota Tennessee Texas Utah Vermont Virginia Washington West Virginia Wisconsin Wyoming . Date . 2000-01-01 4.7 | 6.3 | 4.1 | 4.4 | 5.0 | 2.8 | 2.8 | 3.5 | 3.7 | 3.7 | 4.7 | 4.6 | 4.2 | 3.2 | 2.4 | 3.4 | 4.2 | 5.1 | 3.6 | 3.4 | 3.0 | 3.3 | 3.0 | 5.4 | 3.1 | 5.1 | 2.8 | 3.9 | 2.7 | 5.1 | 4.7 | 3.8 | 3.3 | 3.1 | 4.1 | 3.2 | 5.0 | 4.1 | 4.0 | 4.0 | 2.4 | 3.7 | 4.6 | 3.1 | 2.7 | 2.6 | 4.9 | 5.8 | 3.2 | 4.1 | . 2000-02-01 4.7 | 6.3 | 4.1 | 4.3 | 5.0 | 2.8 | 2.7 | 3.6 | 3.7 | 3.6 | 4.6 | 4.6 | 4.2 | 3.3 | 2.4 | 3.4 | 4.1 | 5.1 | 3.5 | 3.4 | 2.9 | 3.2 | 3.0 | 5.5 | 3.2 | 5.0 | 2.8 | 3.9 | 2.7 | 5.0 | 4.7 | 3.7 | 3.3 | 3.0 | 4.1 | 3.1 | 5.0 | 4.0 | 4.0 | 3.9 | 2.4 | 3.7 | 4.6 | 3.1 | 2.6 | 2.5 | 4.9 | 5.6 | 3.2 | 3.9 | . 2000-03-01 4.6 | 6.3 | 4.0 | 4.3 | 5.0 | 2.7 | 2.6 | 3.6 | 3.7 | 3.6 | 4.5 | 4.6 | 4.3 | 3.3 | 2.4 | 3.5 | 4.1 | 5.1 | 3.5 | 3.5 | 2.8 | 3.2 | 3.0 | 5.5 | 3.3 | 5.0 | 2.8 | 4.0 | 2.7 | 4.9 | 4.6 | 3.6 | 3.4 | 3.0 | 4.0 | 3.1 | 5.0 | 4.0 | 4.0 | 3.8 | 2.4 | 3.8 | 4.5 | 3.1 | 2.6 | 2.4 | 5.0 | 5.5 | 3.3 | 3.9 | . 2000-04-01 4.6 | 6.3 | 4.0 | 4.3 | 5.1 | 2.7 | 2.5 | 3.7 | 3.7 | 3.7 | 4.4 | 4.6 | 4.3 | 3.3 | 2.5 | 3.5 | 4.1 | 5.1 | 3.4 | 3.5 | 2.7 | 3.3 | 3.0 | 5.6 | 3.3 | 5.0 | 2.8 | 4.0 | 2.7 | 4.9 | 4.6 | 3.6 | 3.4 | 2.9 | 4.0 | 3.1 | 5.0 | 4.0 | 4.0 | 3.7 | 2.4 | 3.8 | 4.4 | 3.1 | 2.7 | 2.4 | 5.0 | 5.4 | 3.4 | 3.8 | . 2000-05-01 4.5 | 6.3 | 4.0 | 4.2 | 5.1 | 2.7 | 2.4 | 3.7 | 3.7 | 3.7 | 4.3 | 4.6 | 4.3 | 3.3 | 2.5 | 3.5 | 4.1 | 5.1 | 3.3 | 3.6 | 2.6 | 3.5 | 3.0 | 5.6 | 3.3 | 5.0 | 2.8 | 4.0 | 2.7 | 4.9 | 4.6 | 3.6 | 3.5 | 2.9 | 4.1 | 3.1 | 5.1 | 4.0 | 4.1 | 3.8 | 2.4 | 3.9 | 4.3 | 3.2 | 2.7 | 2.3 | 5.1 | 5.4 | 3.5 | 3.8 | . states = [ &#39;Arizona&#39;,&#39;California&#39;,&#39;Florida&#39;,&#39;Illinois&#39;, &#39;Michigan&#39;,&#39;New York&#39;,&#39;Texas&#39; ] unemp = unemp_all[states] unemp.head() # a subset . state Arizona California Florida Illinois Michigan New York Texas . Date . 2000-01-01 4.1 | 5.0 | 3.7 | 4.2 | 3.3 | 4.7 | 4.6 | . 2000-02-01 4.1 | 5.0 | 3.7 | 4.2 | 3.2 | 4.7 | 4.6 | . 2000-03-01 4.0 | 5.0 | 3.7 | 4.3 | 3.2 | 4.6 | 4.5 | . 2000-04-01 4.0 | 5.1 | 3.7 | 4.3 | 3.3 | 4.6 | 4.4 | . 2000-05-01 4.0 | 5.1 | 3.7 | 4.3 | 3.5 | 4.6 | 4.3 | . unemp.plot(figsize=(8,6)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fd32f50e400&gt; . unemp.index . DatetimeIndex([&#39;2000-01-01&#39;, &#39;2000-02-01&#39;, &#39;2000-03-01&#39;, &#39;2000-04-01&#39;, &#39;2000-05-01&#39;, &#39;2000-06-01&#39;, &#39;2000-07-01&#39;, &#39;2000-08-01&#39;, &#39;2000-09-01&#39;, &#39;2000-10-01&#39;, ... &#39;2017-03-01&#39;, &#39;2017-04-01&#39;, &#39;2017-05-01&#39;, &#39;2017-06-01&#39;, &#39;2017-07-01&#39;, &#39;2017-08-01&#39;, &#39;2017-09-01&#39;, &#39;2017-10-01&#39;, &#39;2017-11-01&#39;, &#39;2017-12-01&#39;], dtype=&#39;datetime64[ns]&#39;, name=&#39;Date&#39;, length=216, freq=None) . unemp.loc[&#39;01/01/2000&#39;] . state Arizona 4.1 California 5.0 Florida 3.7 Illinois 4.2 Michigan 3.3 New York 4.7 Texas 4.6 Name: 2000-01-01 00:00:00, dtype: float64 . unemp.loc[&#39;01/01/2000&#39;:&#39;06/01/2000&#39;] . state Arizona California Florida Illinois Michigan New York Texas . Date . 2000-01-01 4.1 | 5.0 | 3.7 | 4.2 | 3.3 | 4.7 | 4.6 | . 2000-02-01 4.1 | 5.0 | 3.7 | 4.2 | 3.2 | 4.7 | 4.6 | . 2000-03-01 4.0 | 5.0 | 3.7 | 4.3 | 3.2 | 4.6 | 4.5 | . 2000-04-01 4.0 | 5.1 | 3.7 | 4.3 | 3.3 | 4.6 | 4.4 | . 2000-05-01 4.0 | 5.1 | 3.7 | 4.3 | 3.5 | 4.6 | 4.3 | . 2000-06-01 4.0 | 5.1 | 3.8 | 4.3 | 3.7 | 4.6 | 4.3 | . # Data aggregations are used extensively to analyze and manipulate data unemp.mean() . state Arizona 6.301389 California 7.299074 Florida 6.048611 Illinois 6.822685 Michigan 7.492593 New York 6.102315 Texas 5.695370 dtype: float64 . unemp.var(axis=1) . Date 2000-01-01 0.352381 2000-02-01 0.384762 2000-03-01 0.364762 2000-04-01 0.353333 2000-05-01 0.294762 ... 2017-08-01 0.141429 2017-09-01 0.163333 2017-10-01 0.165714 2017-11-01 0.165714 2017-12-01 0.148095 Length: 216, dtype: float64 . #classify states as “low unemployment” or “high unemployment” based on whether their mean unemployment level is above or below 6.5 def high_or_low(s): &quot;&quot;&quot; high if the mean is above 6.5 and low if the mean is below 6.5 &quot;&quot;&quot; if s.mean() &lt; 6.5: out =&#39;Low&#39; else: out = &#39;High&#39; return out . unemp.agg(high_or_low) . state Arizona Low California High Florida Low Illinois High Michigan High New York Low Texas Low dtype: object . unemp.agg(high_or_low,axis=1) . Date 2000-01-01 Low 2000-02-01 Low 2000-03-01 Low 2000-04-01 Low 2000-05-01 Low ... 2017-08-01 Low 2017-09-01 Low 2017-10-01 Low 2017-11-01 Low 2017-12-01 Low Length: 216, dtype: object . unemp.agg([min,max,high_or_low]) . Arizona California Florida Illinois Michigan New York Texas . min 3.6 | 4.5 | 3.1 | 4.2 | 3.2 | 4.2 | 3.9 | . max 10.9 | 12.3 | 11.3 | 11.3 | 14.6 | 8.9 | 8.3 | . high_or_low Low | High | Low | High | High | Low | Low | . unemp.agg([min,max,high_or_low]).columns . Index([&#39;Arizona&#39;, &#39;California&#39;, &#39;Florida&#39;, &#39;Illinois&#39;, &#39;Michigan&#39;, &#39;New York&#39;, &#39;Texas&#39;], dtype=&#39;object&#39;) . .",
            "url": "https://d3la.github.io/wOL3/2020/12/03/QuantEconDS.html",
            "relUrl": "/2020/12/03/QuantEconDS.html",
            "date": " • Dec 3, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://d3la.github.io/wOL3/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://d3la.github.io/wOL3/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Love&amp;Compassion; Truth&amp;Conviction .",
          "url": "https://d3la.github.io/wOL3/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://d3la.github.io/wOL3/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}